/**
ClientSubject class that has jFrame to implement the request and response
process between the client and server. Basically, it sends request to connect
and send the input data from client, and gets the return data from server.
@author jeongj
 */
import java.io.*;
import java.net.*;


public class ClientSubject extends javax.swing.JFrame 
{

   private Socket sock = null;
   private BufferedReader inFromServer;
   private PrintWriter outToServer;
   private String value;
   private String modifiedValue;
  
   public ClientSubject() {
       initComponents();
   }

   /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        IpAdress = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Port = new javax.swing.JTextField();
        ConnetButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        RequestText = new javax.swing.JTextField();
        Send_Button = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        OutputText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Ip Address");

        IpAdress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IpAdressActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Port");

        Port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PortActionPerformed(evt);
            }
        });

        ConnetButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        ConnetButton.setText("Connet");
        ConnetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnetButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Send to server:");

        RequestText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequestTextActionPerformed(evt);
            }
        });

        Send_Button.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        Send_Button.setText("Send");
        Send_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Send_ButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Output:");
        jLabel4.setToolTipText("");

        OutputText.setEditable(false);
        OutputText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        OutputText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(OutputText, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Send_Button)
                    .addComponent(ConnetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(IpAdress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(Port, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(RequestText))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IpAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(ConnetButton)
                .addGap(35, 35, 35)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RequestText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Send_Button)
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(OutputText, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void IpAdressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IpAdressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IpAdressActionPerformed

    private void OutputTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutputTextActionPerformed
   /**
   ConnectButtonActionPerformed calls the openSocket method to
   connect the client and server.
   @param evt 
   */
    private void ConnetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnetButtonActionPerformed
      if(IpAdress.getText().equals("") || Port.getText().equals(""))
         OutputText.setText("Type a Ip Address and Port");
      else
      {
         openSocket();
      }
                   
    }//GEN-LAST:event_ConnetButtonActionPerformed

    private void RequestTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequestTextActionPerformed
   
    }//GEN-LAST:event_RequestTextActionPerformed
   /**
   SendButtonActionPerformed calls Send method, once done with send method
   it calls closeSocket Method to close the socket.
   @param evt 
   */
    private void Send_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Send_ButtonActionPerformed
      if(sock == null)
      {
         OutputText.setText("Connect First");        
      }
      else
      {
         send();
      }
    }//GEN-LAST:event_Send_ButtonActionPerformed

    private void PortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PortActionPerformed

   /**
   Main method that runs jFrame.
   @param args the command line arguments
   */
   public static void main(String args[]) 
   {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientSubject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientSubject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientSubject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientSubject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() 
      {
         public void run() 
         {
            new ClientSubject().setVisible(true);
         }
      });
   }
   
   /**
   openSocket method which getText of Address and port number
   and creates socket and PrintWriter and BufferReader.
   */
   public void openSocket()
   {
      try
      {
         int portNum = Integer.parseInt( Port.getText() );
         String host = IpAdress.getText();
         sock = new Socket( host, portNum );
         outToServer = new PrintWriter( sock.getOutputStream(), true);
         inFromServer = new BufferedReader( new InputStreamReader(
                                            sock.getInputStream()));
      }
      catch( Exception ex )
      {
         System.out.println( "Error: " + ex );
         sock = null;   
      }
   }
   
   
   /**
   Once the server did response to the client's request
   It closes BufferedReader, PrintWriter and Socket.
   Just make sure to close Reader and Writer before close the socket.   
   */
   public void closeSocket()
   {
      try
      {
         inFromServer.close();
         outToServer.close();
         sock.close();
         sock = null;
      }
      catch( Exception ex )
      {
         System.out.println( "Error: " + ex );
         sock = null;   
      }
   }
   
   /**
   Method the send the input data from client to server 
   and also gets output data from a server.
   Once it reads the data from socket it setText to outputText box.
   */
   public void send()
   {
      try
      {
         if( sock != null )
         {
            value = RequestText.getText();
            outToServer.println( value );
            modifiedValue = inFromServer.readLine();
            OutputText.setText( modifiedValue );
         }
      }
      catch(Exception ex)
      {
         System.out.println( "Error: " + ex );
         sock = null;   
      }
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnetButton;
    private javax.swing.JTextField IpAdress;
    private javax.swing.JTextField OutputText;
    private javax.swing.JTextField Port;
    private javax.swing.JTextField RequestText;
    private javax.swing.JButton Send_Button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
